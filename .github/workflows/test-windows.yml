# This is a basic workflow to help you get started with Actions

name: windows

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2    

      - name: setup prerequisites (windows)
        run: echo "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: print env
        shell: bash
        run: env

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64
            
      - name: print env
        shell: bash
        run: env

      - name: search for lib
        run: |
          dir c:
          dir 'C:\Program Files (x86)\'
          dir 'C:\Program Files (x86)\Microsoft Visual Studio\'        

      - name: checkout blink1-tool
        run: git clone https://github.com/todbot/blink1-tool
        
      - name: compile blink1-tool
        shell: bash
        run: cd blink1-tool && make

        
    
# # Controls when the action will run. Triggers the workflow on push or pull request
# # events but only for the master branch
# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   testwin:
#     runs-on: windows-latest
#     continue-on-error: true
#     strategy:
#       matrix:
# #        node-version: [10.x, 12.x, 14.x]
# #        os: [ubuntu-latest, windows-latest, macos-latest]
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2

# #          "%VS140COMNTOOLS%../../VC/vcvarsall.bat"
# #         call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
# #              "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"
# #          dir -Recurse -Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise" -Filter vcvarsallbat
# #       - name: look for make1
# #         continue-on-error: true
# #         run:  which make
# #       - name: look for make2
# #         continue-on-error: true
# #         run:  which mingw32-make
        
# #       - name: look for vcvars
# #         continue-on-error: true
# #         run: Get-ChildItem -Path "C:\Program Files (x86)" -Filter vcvars* -Recurse | Select FullName
        
# #       - name: look for lib.exe
# #         continue-on-error: true
# #         run: Get-ChildItem -Path "C:\Program Files (x86)" -Filter lib.exe -Recurse | Select FullName
        
# #       - name: try vcvars
# #         continue-on-error: true
# #         run: dir "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

# #       - name: look for lib (windows)
# #         continue-on-error: true
# #         if: matrix.os == 'windows-latest'
# #         run: |
# #           Get-ChildItem -Recurse "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build"
# #           env
  
#       # C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\lib.exe
#       - name: add to path (windows)
#         continue-on-error: true
# #        run: echo "##[add-path]C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin"
#         run: echo "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
#       - name: print env
#         run: env
        
#       - name: check lib
#         continue-on-error: true
#         run: |
#           lib.exe /verbose 
        
#       - name: try bash on windows
#         continue-on-error: true
#         shell: bash
#         run: |
#           which make
#           which gcc
#           which bash
#           which lib
          
#       - name: try bash on windows 2
#         continue-on-error: true
#         shell: bash
#         run: env

          
#       - name: make with makefile
#         continue-on-error: true
#         shell: bash
#         run: make

#       # Runs a set of commands using the runners shell
#       - name: Run multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
#           uname -a
      
          

      
